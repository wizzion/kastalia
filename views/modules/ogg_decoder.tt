<script>
    function decodeOgg(arrayBuffer,folio_id){

      var typedArray = new Uint8Array(arrayBuffer);
      var decoderWorker = new Worker('/js/decoderWorker.min.js');
      var wavWorker = new Worker('/js//waveWorker.min.js');
      //var desiredSampleRate = parseInt(sampleRate.value,10);
      var desiredSampleRate = 16000;

      decoderWorker.postMessage({ 
        command:'init',
        decoderSampleRate: desiredSampleRate,
        outputBufferSampleRate: desiredSampleRate
      });

      wavWorker.postMessage({ 
        command:'init',
        //wavBitDepth: parseInt(bitDepth.value,10),
        wavBitDepth: 8,
        wavSampleRate: desiredSampleRate
      });

      decoderWorker.onmessage = function(e){

        // null means decoder is finished
        if (e.data === null) {
          wavWorker.postMessage({ command: 'done' });
        }

        // e.data contains decoded buffers as float32 values
        else {
          wavWorker.postMessage({
            command: 'encode',
            buffers: e.data
          }, e.data.map(function(typedArray){
            return typedArray.buffer;
          }));
        }
      };

      wavWorker.onmessage = function(e){

        if (e.data.message === "page") {
          var fileName = new Date().toISOString() + ".wav";
          var dataBlob = new Blob( [ e.data.page ], { type: "audio/wav" } );
          var url = URL.createObjectURL( dataBlob );

          var audio = document.createElement('audio');
          audio.controls = true;
          //audio.src = URL.createObjectURL( dataBlob );
          $("#fallback_"+folio_id).attr('src',URL.createObjectURL( dataBlob ));
          $("#ogg_"+folio_id).attr('src','');
/*
          var link = document.createElement('a');
          link.href = url;
          link.download = fileName;
          link.innerHTML = link.download;

          var li = document.createElement('li');
          li.appendChild(link);
          li.appendChild(audio);

          recordingslist.appendChild(li);
*/
        }
      };

      decoderWorker.postMessage({
        command: 'decode',
        pages: typedArray
      }, [typedArray.buffer] );
    };

    fileInput.onchange = function(e){
      var fileReader = new FileReader();

      fileReader.onload = function() {
        decodeOgg(this.result);
      };

      fileReader.readAsArrayBuffer( e.target.files[0] );
    };

    remoteButton.onclick = function(){
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "./mono.opus", true);
      xhr.responseType = "arraybuffer";

      xhr.onload = function(e) {
        decodeOgg(this.response);
      };

      xhr.send();
    };

  </script>
